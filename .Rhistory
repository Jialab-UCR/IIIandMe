theme(
legend.position = "none",
axis.text = element_blank(),
axis.title = element_blank(),
panel.grid = element_blank(),
plot.margin = unit(rep(-4,4), "cm")
) +
coord_polar() +
# Add labels on top of each bar
#geom_text(data=label_data, aes(x=id, y=tot+10, label=individual, hjust=hjust), color="black", fontface="bold",alpha=0.6, size=5, angle= label_data$angle, inherit.aes = FALSE ) +
# Add base line information
geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = "black", alpha=0.8, size=0.6 , inherit.aes = FALSE )  +
geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = "black", alpha=0.8, size=4, fontface="bold", inherit.aes = FALSE)
p
# Save at png
ggsave(p, file="~/bigdata/3andme/figures/fig2_allwithNA.png", width=10, height=10)
co[[1]]
aco<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "i", all.x = TRUE), co)
aco<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "pollen", all.x = TRUE), co)
View(aco)
aco<- Reduce(function(dtf1, dtf2) merge(dtf1, dtf2, by = "pollen"), co)
View(aco)
aco<- do.call("rbind", co)
View(aco)
View(aco)
npol<- 5
choice <- gtools::combinations(npol, 3, 5:(npol + 4))
choice
for (i in 1:length(hap)) {
w <- which.max(c(sum(hap[[i]][, 1] == 0), sum(hap[[i]][, 2] == 0)))
if (i == 1) {
com <- data.frame(hap[[1]][, w])
colnames(com) <- "hap_1"
com$names <- rownames(hap[[1]])
} else {
com <- merge(com, data.frame(hap[[i]][, w], names = rownames(hap[[i]])), by = "names")
colnames(com)[i + 1] <- paste("hap_", i, sep = "")
}
}
rownames(com) <- com$names
com <- com[, -which(colnames(com) == "names")]
dup <- com[!duplicated(lapply(com, summary))]
count <- NULL
for (i in 1:ncol(dup)) {
nhap <- colSums(com == com[, match(colnames(dup)[i], colnames(com))])
count <- c(count, sum(nhap == nrow(com)))
}
print("ratio is-----")
print(count)
print("----------")
which.max(count)
dup
View(com)
i<-1
match(colnames(dup)[i]
match(colnames(dup)[i], colnames(com))
match(colnames(dup)[i], colnames(com))
com == com[, match(colnames(dup)[i], colnames(com))]
colSums(com == com[, match(colnames(dup)[i], colnames(com))])
which(nhap == nrow(com))
nhap == nrow(com)
nrow(com)
nhap <- colSums(com == com[, match(colnames(dup)[i], colnames(com))])
which(nhap == nrow(com))
count <- NULL
whap<- NULL
for (i in 1:ncol(dup)) {
nhap <- colSums(com == com[, match(colnames(dup)[i], colnames(com))])
count <- c(count, sum(nhap == nrow(com)))
whap<- c(whap, which(nhap == nrow(com)))
}
whap
count <- NULL
whap<- list()
for (i in 1:ncol(dup)) {
nhap <- colSums(com == com[, match(colnames(dup)[i], colnames(com))])
count <- c(count, sum(nhap == nrow(com)))
whap[[i]]<- which(nhap == nrow(com))
}
print(count)
whap
whap[[1]]
str(whap[[1]])
which.max(count)
whap[[which.max(count)]]
co[whap[[which.max(count)]]]
co[[whap[[which.max(count)]]]]
co
wco<- whap[[which.max(count)]]
wco
co[[wco]]
c(wco)
co[[c(wco)]]
as.numeric(wco)
co[[as.numeric(wco)]]
c(as.numeric(wco))
co[[c(as.numeric(wco))]]
c[[1]]
co[[1]]
co[[1,2]]
co[[c(1,2)]]
co[c(as.numeric(wco))]
as.numeric(wco)
co[c(wco)]
co
aco<- do.call("rbind", co[c(wco)])
View(aco)
aggregate(list(numdup=rep(1,nrow(aco))), aco, length)
list(numdup=rep(1,nrow(aco)))
aggregate(cbind(aco[0],numdup=1), aco, length)
nodup<- aggregate(list(numdup=rep(1,nrow(aco))), aco, length)
nodup[order(nodup$pollen),]
wco
choice
count(5, choice[,1])
?count
count
choice %>% count([,1])
aggregate(list(numdup=rep(1,nrow(choice))), choice, length)
nrow(choice)
list(numdup=rep(1,nrow(choice)))
aggregate(list(numdup=rep(1,nrow(choice))), choice, length)
aggregate(list(numdup=rep(1,nrow(choice))), data.frame(choice), length)
c(wco)
choice[c(wco),]
choice
wco
table(choice[c(wco),])
data.frame(table(choice[c(wco),]))
choice-4
data.frame(table(choice[c(wco),]-4))
freq<- data.frame(table(choice[c(wco),]-4))
nodup
nodup<- nodup[order(nodup$pollen),]
nodup
freq$Var1<- paste('pollen', freq$Var1, seq='')
freq
freq$Var1<- paste('pol', freq$Var1, seq='')
freq
freq$Var1
freq<- data.frame(table(choice[c(wco),]-4))
freq$Var1<- paste('pol', freq$Var1, seq='')
freq
?paste
freq$Var1
freq<- data.frame(table(choice[c(wco),]-4))
freq$Var1<- paste('pol', freq$Var1, collapse = NULL)
freq
freq<- data.frame(table(choice[c(wco),]-4))
freq$Var1<- paste('pol', freq$Var1, sep = '')
freq
match(nodup$pollen, freq$Var1)
nodup$percent<- nodup$numdup/freq[match(nodup$pollen, freq$Var1),2]
View(nodup)
nodup
View(input)
vote_hap
v1 <- dup[, which.max(count)]
v2 <- flipFun(v1)
vote_hap <- cbind(v1, v2)
rownames(vote_hap) <- rownames(dup)
colnames(vote_hap) <- c("hap1", "hap2")
vote_hap
rownames(vote_hap)
View(dup)
View(com)
rownames(hap[[1]])
for (i in 1:length(hap)) {
w <- which.max(c(sum(hap[[i]][, 1] == 0), sum(hap[[i]][, 2] == 0)))
if (i == 1) {
com <- data.frame(hap[[1]][, w])
colnames(com) <- "hap_1"
com$names <- rownames(hap[[1]])
} else {
com <- merge(com, data.frame(hap[[i]][, w], names = rownames(hap[[i]])), by = "names")
colnames(com)[i + 1] <- paste("hap_", i, sep = "")
}
}
View(com)
rownames(hap[[1]])
i<-1
w <- which.max(c(sum(hap[[i]][, 1] == 0), sum(hap[[i]][, 2] == 0)))
com <- data.frame(hap[[1]][, w])
colnames(com) <- "hap_1"
com$names <- rownames(hap[[1]])
View(com)
for (i in 1:length(hap)) {
w <- which.max(c(sum(hap[[i]][, 1] == 0), sum(hap[[i]][, 2] == 0)))
if (i == 1) {
com <- data.frame(hap[[1]][, w])
colnames(com) <- "hap_1"
com$names <- rownames(hap[[1]])
} else {
com <- merge(com, data.frame(hap[[i]][, w], names = rownames(hap[[i]])), by = "names")
colnames(com)[i + 1] <- paste("hap_", i, sep = "")
#com<- com[order(com$names),]
}
}
View(com)
com<- com[order(com$names),]
View(com)
com$names<- as.numeric(com$names)
View(com)
com<- com[order(com$names),]
View(com)
for (i in 1:length(hap)) {
w <- which.max(c(sum(hap[[i]][, 1] == 0), sum(hap[[i]][, 2] == 0)))
if (i == 1) {
com <- data.frame(hap[[1]][, w])
colnames(com) <- "hap_1"
com$names <- rownames(hap[[1]])
} else {
com <- merge(com, data.frame(hap[[i]][, w], names = rownames(hap[[i]])), by = "names")
colnames(com)[i + 1] <- paste("hap_", i, sep = "")
com$names<- as.numeric(com$names)
com<- com[order(com$names),]
}
}
rownames(com) <- com$names
com <- com[, -which(colnames(com) == "names")]
dup <- com[!duplicated(lapply(com, summary))]
View(com)
dup <- com[!duplicated(lapply(com, summary))]
View(dup)
count <- NULL
whap<- list()
for (i in 1:ncol(dup)) {
nhap <- colSums(com == com[, match(colnames(dup)[i], colnames(com))])
count <- c(count, sum(nhap == nrow(com)))
whap[[i]]<- which(nhap == nrow(com))
}
print("ratio is-----")
print(count)
print("----------")
v1 <- dup[, which.max(count)]
v2 <- flipFun(v1)
vote_hap <- cbind(v1, v2)
rownames(vote_hap) <- rownames(dup)
colnames(vote_hap) <- c("hap1", "hap2")
wco<- whap[[which.max(count)]]
aco<- do.call("rbind", co[c(wco)])
nodup<- aggregate(list(numdup=rep(1,nrow(aco))), aco, length)
nodup<- nodup[order(nodup$pollen),]
freq<- data.frame(table(choice[c(wco),]-4))
freq$Var1<- paste('pol', freq$Var1, sep = '')
nodup$percent<- nodup$numdup/freq[match(nodup$pollen, freq$Var1),2]
print("----------")
nodup
vote_hap
v1
View(input)
pol<- input[5:9]
View(pol)
match(rownames(vote_hap), rownames(pol))
npol<- pol[match(rownames(vote_hap), rownames(pol)),]-v1
View(npol)
abs
ab
?abs
npol<- abs(pol[match(rownames(vote_hap), rownames(pol)),]-v1)
npol
crossoverCountFun(npol[, 1])
p1l <- crossoverCountFun(npol[, 2])
p1l
a<-1
pl <- crossoverCountFun(npol[, a])
nodup$vote<- rep(NA, nrow(nodup))
nodup
match(pl$locus, nodup$locus)
nodup[match(pl$locus, nodup$locus), 7]<- 'Yes'
xx<- match(pl$locus, nodup$locus)
is.na(match(pl$locus, nodup$locus))
match(pl$locus, nodup$locus)
is.na(c(NA, 1,2,3))
is.na(c(NA, 1,2,3)) == T
prod(is.na(xx))
prod(is.na(c(NA, 1,2,3)))
prod(is.na(xx))!=1
nodup$vote<- rep('No', nrow(nodup))
nodup
pol<- input[5:9]
npol<- abs(pol[match(rownames(vote_hap), rownames(pol)),]-v1)
for (a in 1: ncol(pol)) {
pl <- crossoverCountFun(npol[, a])
xx<- match(pl$locus, nodup$locus)
if (prod(is.na(xx))!=1) {
nodup[is.na(xx), 7]<- 'Yes'
}
}
nodup
a<-2
pl <- crossoverCountFun(npol[, a])
pl
xx<- match(pl$locus, nodup$locus)
xx
is.na(xx)
prod(is.na(xx))
prod(is.na(xx))!=1
is.na(xx)
na.omit(xx)
for (a in 1: ncol(pol)) {
pl <- crossoverCountFun(npol[, a])
xx<- match(pl$locus, nodup$locus)
if (prod(is.na(xx))!=1) {
nodup[na.omit(xx), 7]<- 'Yes'
}
}
nodup
devtools::check()
devtools::document()
devtools::check()
#################################    sample data
c<- list()
for (i in 1:9) {
c[[i]]<- read_excel("~/bigdata/3andme/citrus/CLEMENTINE_ANALYSIS 2021-2020-2017-2016_Arthur_2022.xlsx", sheet = i)
}
library(readxl)
for (i in 1:9) {
c[[i]]<- read_excel("~/bigdata/3andme/citrus/CLEMENTINE_ANALYSIS 2021-2020-2017-2016_Arthur_2022.xlsx", sheet = i)
}
for (x in 1:9) {
print(nrow(c[[i]]))
}
c[[1]]
for (x in 1:9) {
print(nrow(c[[x]]))
}
setwd('~/bigdata/3andme/maize/')
chr<- 1
realDa <- read.table(paste('All_genotype_chr', chr, '.v5.0.txt', sep=''),
header=T, stringsAsFactors=F)
nrow()
nrow(realDa)
VoteCount <- function(input, hap, co, npol) {
library(gtools)
choice <- gtools::combinations(npol, 3, 5:(npol + 4))
for (i in 1:length(hap)) {
w <- which.max(c(sum(hap[[i]][, 1] == 0), sum(hap[[i]][, 2] == 0)))
if (i == 1) {
com <- data.frame(hap[[1]][, w])
colnames(com) <- "hap_1"
com$names <- rownames(hap[[1]])
} else {
com <- merge(com, data.frame(hap[[i]][, w], names = rownames(hap[[i]])), by = "names")
colnames(com)[i + 1] <- paste("hap_", i, sep = "")
com$names<- as.numeric(com$names)
com<- com[order(com$names),]
}
}
rownames(com) <- com$names
com <- com[, -which(colnames(com) == "names")]
dup <- com[!duplicated(lapply(com, summary))]
count <- NULL
whap<- list()
for (i in 1:ncol(dup)) {
nhap <- colSums(com == com[, match(colnames(dup)[i], colnames(com))])
count <- c(count, sum(nhap == nrow(com)))
whap[[i]]<- which(nhap == nrow(com))
}
print("ratio is-----")
print(count)
print("----------")
v1 <- dup[, which.max(count)]
v2 <- flipFun(v1)
vote_hap <- cbind(v1, v2)
rownames(vote_hap) <- rownames(dup)
colnames(vote_hap) <- c("hap1", "hap2")
wco<- whap[[which.max(count)]]
aco<- do.call("rbind", co[c(wco)])
nodup<- aggregate(list(numdup=rep(1,nrow(aco))), aco, length)
nodup<- nodup[order(nodup$pollen),]
freq<- data.frame(table(choice[c(wco),]-4))
freq$Var1<- paste('pol', freq$Var1, sep = '')
nodup$percent<- nodup$numdup/freq[match(nodup$pollen, freq$Var1),2]
nodup$vote<- rep('No', nrow(nodup))
pol<- input[5:9]
npol<- abs(pol[match(rownames(vote_hap), rownames(pol)),]-v1)
for (a in 1: ncol(pol)) {
pl <- crossoverCountFun(npol[, a])
xx<- match(pl$locus, nodup$locus)
if (prod(is.na(xx))!=1) {
nodup[na.omit(xx), 7]<- 'Yes'
}
}
#vote_co<- co[[as.numeric(strsplit(colnames(dup)[which.max(count)], '_')[[1]][2])]]
vote<- list(vote_hap, nodup)
if (ncol(dup) > 1) {
tmp <- dup[, -which.max(count), drop = F]
for (c in 1:ncol(tmp)) {
whap <- colSums(com == com[, match(colnames(tmp)[c], colnames(com))])
print("not major count is-----")
se <- choice[which(whap == nrow(com)), ]
if (!is.null(nrow(se))) {
for (d in 1:nrow(se)) {
print(colnames(input)[se[d, ]])
}
} else {
print(colnames(input)[se])
}
print("----------")
}
}
return(vote)
}
VoteCount <- function(input, hap_co, npol) {
library(gtools)
hap<- hap_co[[1]]
co<- hap_co[[2]]
choice <- gtools::combinations(npol, 3, 5:(npol + 4))
for (i in 1:length(hap)) {
w <- which.max(c(sum(hap[[i]][, 1] == 0), sum(hap[[i]][, 2] == 0)))
if (i == 1) {
com <- data.frame(hap[[1]][, w])
colnames(com) <- "hap_1"
com$names <- rownames(hap[[1]])
} else {
com <- merge(com, data.frame(hap[[i]][, w], names = rownames(hap[[i]])), by = "names")
colnames(com)[i + 1] <- paste("hap_", i, sep = "")
com$names<- as.numeric(com$names)
com<- com[order(com$names),]
}
}
rownames(com) <- com$names
com <- com[, -which(colnames(com) == "names")]
dup <- com[!duplicated(lapply(com, summary))]
count <- NULL
whap<- list()
for (i in 1:ncol(dup)) {
nhap <- colSums(com == com[, match(colnames(dup)[i], colnames(com))])
count <- c(count, sum(nhap == nrow(com)))
whap[[i]]<- which(nhap == nrow(com))
}
print("ratio is-----")
print(count)
print("----------")
v1 <- dup[, which.max(count)]
v2 <- flipFun(v1)
vote_hap <- cbind(v1, v2)
rownames(vote_hap) <- rownames(dup)
colnames(vote_hap) <- c("hap1", "hap2")
wco<- whap[[which.max(count)]]
aco<- do.call("rbind", co[c(wco)])
nodup<- aggregate(list(numdup=rep(1,nrow(aco))), aco, length)
nodup<- nodup[order(nodup$pollen),]
freq<- data.frame(table(choice[c(wco),]-4))
freq$Var1<- paste('pol', freq$Var1, sep = '')
nodup$percent<- nodup$numdup/freq[match(nodup$pollen, freq$Var1),2]
nodup$vote<- rep('No', nrow(nodup))
pol<- input[5:9]
npol<- abs(pol[match(rownames(vote_hap), rownames(pol)),]-v1)
for (a in 1: ncol(pol)) {
pl <- crossoverCountFun(npol[, a])
xx<- match(pl$locus, nodup$locus)
if (prod(is.na(xx))!=1) {
nodup[na.omit(xx), 7]<- 'Yes'
}
}
#vote_co<- co[[as.numeric(strsplit(colnames(dup)[which.max(count)], '_')[[1]][2])]]
vote<- list(vote_hap, nodup)
if (ncol(dup) > 1) {
tmp <- dup[, -which.max(count), drop = F]
for (c in 1:ncol(tmp)) {
whap <- colSums(com == com[, match(colnames(tmp)[c], colnames(com))])
print("not major count is-----")
se <- choice[which(whap == nrow(com)), ]
if (!is.null(nrow(se))) {
for (d in 1:nrow(se)) {
print(colnames(input)[se[d, ]])
}
} else {
print(colnames(input)[se])
}
print("----------")
}
}
return(vote)
}
CoForVisual<- function(loci, n){
co<- data.frame()
if (length(which(loci[,2]==1))>0){
tmp<- loci[which(loci[,2]==1),]
co<- rbind(co, data.frame(name=c(paste('co', 1:nrow(tmp), sep = '')),
chr=tmp$pollen,
start=tmp$locus,
end=rep(n,nrow(tmp))))
}
if(length(which(loci[,2]==2))>0){
tmp<- loci[which(loci[,2]==2),]
ntmp<- nrow(tmp)
co<- rbind(co, data.frame(name=c(paste('co', (nrow(co)+1):(ntmp/2+ nrow(co)), sep = '')),
chr=tmp[seq(1, ntmp, 2),]$pollen,
start=tmp[seq(1, ntmp, 2),]$locus,
end=tmp[seq(2, ntmp, 2),]$locus))}
if(length(which(loci[,2]==3))>0){
tmp<- loci[which(loci[,2]==3),]
ntmp<- nrow(tmp)
co<- rbind(co, data.frame(name=c(paste('co', (nrow(co)+1):(2*ntmp/3+ nrow(co)), sep = '')),
chr=rep(tmp[seq(1, ntmp, 3),]$pollen, each=2),
start=tmp[c(rbind(seq(1, ntmp, 3),seq(3, ntmp, 3))),]$locus,
end=c(rbind(tmp[seq(2, ntmp, 3),]$locus,
rep(n, ntmp/3)))))}
if(length(which(loci[,2]>3))>0){
print('More than 3 crossovers.')
}else{
print('Less than 4 crossovers, visualization is preparing...')
}
return(co)
}
c<- data.frame(chr=colnames(sample)[6:ncol(sample)], start=c(1,1,1,1,1), end=n)
n<- nrow(sample)
c<- data.frame(chr=colnames(sample)[6:ncol(sample)], start=c(1,1,1,1,1), end=n)
head(sample)
